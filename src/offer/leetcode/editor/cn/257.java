package offer.leetcode.editor.cn;
//ÁªôÂÆö‰∏Ä‰∏™‰∫åÂèâÊ†ëÔºåËøîÂõûÊâÄÊúâ‰ªéÊ†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑ„ÄÇ 
//
// ËØ¥Êòé: Âè∂Â≠êËäÇÁÇπÊòØÊåáÊ≤°ÊúâÂ≠êËäÇÁÇπÁöÑËäÇÁÇπ„ÄÇ 
//
// Á§∫‰æã: 
//
// ËæìÂÖ•:
//
//   1
// /   \
//2     3
// \
//  5
//
//ËæìÂá∫: ["1->2->5", "1->3"]
//
//Ëß£Èáä: ÊâÄÊúâÊ†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑ‰∏∫: 1->2->5, 1->3 
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ 
// üëç 424 üëé 0

import java.util.ArrayList;
import java.util.List;

 class BinaryTreePaths{
    public static void main(String[] args) {
        Solution solution = new BinaryTreePaths().new Solution();
        
    }
      public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode(int x) { val = x; }
  }

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 */
class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        dfs(new ArrayList<>(),root);
        List<String> ans = new ArrayList<>();
        for(List<Integer> list : res){
            StringBuilder sb = new StringBuilder();
            list.stream().forEach(i->sb.append(i + "->"));
            ans.add(sb.substring(0,sb.length()-2));
        }
        return ans;
    }

    private void dfs(List<Integer> temp,TreeNode root){
        if(root == null){
            return;
        }
        temp.add(root.val);
        if(root.left == null && root.right == null){
            res.add(new ArrayList<>(temp));
        }
        dfs(temp,root.left);
        dfs(temp,root.right);
        temp.remove(temp.size() - 1);
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}